name: Java CI with Gradle # Workflow 이름

env:
  S3_BUCKET_NAME: apupu-build
  CODE_DEPLOY_APP_NAME: Apupu
  CODE_DEPLOY_GROUP_NAME: Apupu-group

on: # Workflow를 자동으로 트리거 하기 위한 이벤트
  release:
    types: [push] # push를 하면 자동으로 실행
  push:
    branches: [main] # master 브랜치에서 동작

jobs: # 병렬로 실행되는 작업 단위, 여러 step으로 이루어짐
  build:

    runs-on: ubuntu-latest # 스크립트를 작동할 OS
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3 # 재사용 가능한 워크플로 파일의 위치 및 버전
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    # ./gradlw 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod 777 ./gradlew
      shell: bash

    # application.properties 생성
    - name : make application properties
      run : |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.APPLICATION }}" > ./application.properties
      shell: bash
      
    # 프로젝트 build
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash

    # 프로젝트 압축
    - name: Make zip file
      run: zip -r ./practice-deploy.zip .
      shell: bash
    
    # AWS 권한 확인
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    
    # 압축한 프로젝트를 S3로 전송
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./practice-deploy.zip s3://elephantcodingclub/practice-deploy.zip

    # 배포 그룹으로 애플리케이션 전송
    - name: Code Deploy
      run: aws deploy create-deployment --application-name githubaction-elephant --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name githubaction-elephant-group --s3-location bucket=elephantcodingclub,bundleType=zip,key=practice-deploy.zip

    # SSH into the EC2 instance and check for running Java processes
    - name: search runched file and reRun .jar file
      run: |
        processes=$(ssh ubuntu@${{ec2_INSTANCE_PRIVATE_IP}} "ps -ef | grep java")
       
        num_processes=$(echo "$processes" | grep -c "java")

        if [ "$num_processes" -eq 1 ]; then
          ssh ubuntu@${{ec2_INSTANCE_PRIVATE_IP}} "nohup java -jar ~/app/step2/zip/build/libs/*.jar &"
        elif [ "$num_processes" -gt 1 ]; then
          pids=$(echo "$processes" | awk '{print $2}')
          for pid in $pids; do
            ssh ubuntu@${{ec2_INSTANCE_PRIVATE_IP}} "kill $pid"
          done
          ssh ubuntu@${{ec2_INSTANCE_PRIVATE_IP}} "nohup java -jar ~/app/step2/zip/build/libs/*.jar &"
        else
          ssh ubuntu@${{ec2_INSTANCE_PRIVATE_IP}} "nohup java -jar ~/app/step2/zip/build/libs/*.jar &"
        fi
